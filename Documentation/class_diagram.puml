@startuml
component Common {
    package Common {

        package services {
            interface IActor {
                speed
                move()
                placeWeapon(IWeapon)
            }

            interface IWeapon {
                damagePoints
            }

            interface IDamageable {
                hitPoints
            }

            interface IGamePluginService {
                start()
                stop()
            }

            interface IEntityProcessingService {
                process()
            }

            interface IPostEntityProcessingService {
                process()
            }
        }

        package data {
            class World {
                entities
                addEntity()
                removeEntity()
                getEntity()
            }

            class Entity {
                coordinates
                direction

                getCoordinates()
                setCoordinates(coordinates)
                getDirection()
                setDirection(direction)
            }
        }
    }


'	component Parts {
'		interface EntityPart {
'			process()
'		}
'
'		class LifePart implements EntityPart {
'		}
'
'		class MovingPart implements EntityPart {
'		}
'
'		class PositionPart implements EntityPart {
'		}
'
'	}
}
component Bomb{
    package BombSystem {
        class Bomb implements Common.Common.services.IWeapon{
            - timeOfPlacement: Long
            - timeTillExplosion: Long
            - damagePoints: int
            - blastArea: Collections
            + setBlastArea(Collections)
            + calcTimeTillExplosion()
        }
        Bomb --|> Entity : inherits

        class BombExplosionSystem implements Common.Common.services.IEntityProcessingService {
            - world: World
            - gameData: GameData
            + BombExplosionSystem(GameData, World)
            + calculateBlastArea(Bomb, World)
            + process()
        }
    }
}

component Enemy{
    class enemyControlSystem{
        placeBomb()
        move()
    }
    component AI{
    'maybe an interface
        class PathFinding{
            calculatePathToPlayer(Player)
        }

        class BombPlacing {
            calculateOptimalPlacement(Entity,Bomb))
        }
    }

    class EnemyCollisionControlSystem{
        XCord  'maybe?
        YCord  'maybe?
        checkCollision(Map)
    }
}



@enduml