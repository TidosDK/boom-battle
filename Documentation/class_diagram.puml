@startuml
component Common {
    package Common {

        package services {
            interface IActor {
                speed
                move()
                placeWeapon()
            }

            interface IWeapon {
                getDamagePoints()
                setDamagePoints()
            }

            interface ICollidable {
                getCollidable()
                setCollidable()
            }

            interface IDamageable {
                getHitPoints()
                setHitPoints()
            }

            interface IGamePluginService {
                start()
                stop()
            }

            interface IEntityProcessingService {
                process()
            }

            interface IPostEntityProcessingService {
                postProcess()
            }
        }

        package data {
            class World {
                entities
                map
                addEntity()
                removeEntity()
                getEntity()
            }

            class Entity {
                coordinates
                direction

                getCoordinates()
                setCoordinates(coordinates)
                getDirection()
                setDirection(direction)
            }
        }
    }


'	component Parts {
'		interface EntityPart {
'			process()
'		}
'
'		class LifePart implements EntityPart {
'		}
'
'		class MovingPart implements EntityPart {
'		}
'
'		class PositionPart implements EntityPart {
'		}
'
'	}
}
component Bomb{
    package BombSystem {
        class Bomb implements Common.Common.services.IWeapon{
            - timeOfPlacement
            - timeTillExplosion
            - damagePoints
            - blastArea
            + setBlastArea()
            + calcTimeTillExplosion()
        }
        Bomb --|> Entity : inherits

        class BombExplosionSystem implements Common.Common.services.IEntityProcessingService {
            - world
            - gameData
            + BombExplosionSystem()
            + calculateBlastArea()
            + process()
        }
    }
}

component Enemy{
    class enemyControlSystem{
        placeBomb()
        move()
    }
    component AI{
    'maybe an interface
        class PathFinding{
            calculatePathToPlayer()
        }

        class BombPlacing {
            calculateOptimalPlacement())
        }
    }

    class EnemyCollisionControlSystem{
        XCord  'maybe?
        YCord  'maybe?
        checkCollision()
    }
}
	
component Player {
    class Player {
    }

    class PlayerControlSystem {
    - IWeapon
    + placeWeapon()
    + takeDamage()
    + process()
    }

    class PlayerPlugin {
    - Entity
    + createPlayer()
    + start()
    + stop()
    }

    Common.Common.services.IActor <|.. Player.PlayerControlSystem
    Common.Common.services.IDamageable <|.. Player.PlayerControlSystem
    Common.Common.data.Entity <|-- Player.Player
    Common.Common.services.IEntityProcessingService <|.. Player.PlayerControlSystem
    Common.Common.services.IGamePluginService <|.. Player.PlayerPlugin
}



@enduml